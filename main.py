import base64
import io
import pandas as pd
import pickle
from datetime import datetime
from pytz import timezone    

import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_table
import dash_bootstrap_components as dbc
import plotly.express as px

from backend.src import constants
from backend.src import extraction
from backend.src import models
from backend.src import lsi
from backend.src import lda
from backend.src import reportGenerator


external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = dash.Dash(__name__, external_stylesheets=[dbc.themes.DARKLY,
    'https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,400;1,600&family=Quicksand:wght@500&display=swap'])
app.layout = html.Div(children=[
    # Main heading
    html.H1(children=[html.Img(src="https://cdn4.iconfinder.com/data/icons/digital-marketing-6-2/35/295-512.png", 
             style={'width':'50px', 'height':'50px'}), 'Malware Analyzer'], style={'text-align':'center'}), 
    dbc.Tabs(children=[
        # <------------------------------------------ Analyze app UI ----------------------------------------------------------------->
        dbc.Tab(id='analyze_app_tab',label='Analyze App', children=[
            html.Div(children=[
                html.H3("Analyze Application",style={'text-align':'center','color':'#ffc107'}),
                    # input file path feild
                dbc.Row([
                    dbc.Col(dbc.FormGroup(children=[
                                html.H4('Add application below'),
                                dcc.Upload(
                                    id='upload-data',
                                    children=html.Div([
                                        'Drag and Drop or ',
                                        html.A('Select Files')
                                    ]),
                                    style={
                                        'width': '100%',
                                        'height': '60px',
                                        'lineHeight': '60px',
                                        'borderWidth': '1px',
                                        'borderStyle': 'dashed',
                                        'borderRadius': '5px',
                                        'textAlign': 'center',
                                        'margin': '10px'
                                    },
                                    # Allow multiple files to be uploaded
                                    multiple=False
                                ),
                                html.Div(id='output-data-upload'),
                            ])
                    , width=8),
                    dbc.Col(dbc.FormGroup(children=[
                            html.H4('Choose a reduction technique'),
                            dbc.RadioItems(
                                id="radio_reduction_technique",
                                options=[
                                    {'label': 'LSI', 'value': 'lsi'},
                                    {'label': 'HDP', 'value': 'lda'},
                                ],
                                value='lsi',
                                labelStyle={'display': 'inline-block', 'font-size':'17px'},
                                inline=True
                            )
                            ])
                    , width=4)
                ], style={'margin-top':'2%'}),
                
                # input reduction technique
                html.Div(children=[
                            html.H4('ML models used in evaluation'),
                                # html.Div(id="ml_model_list"),
                            dbc.Checklist(
                                options=[
                                    {"label": "Catboost", "value": 'catboost'},
                                    {"label": "KNN", "value": 'knn'},
                                    {"label": "Logistic Regression", "value": 'lr'},
                                    {"label": "Random Forest", "value": 'rf'},
                                    {"label": "SVM", "value": 'svm'},
                                ],
                                value=[],
                                id="checklist_pretrained_ml_models",
                                switch=True,
                                style={
                                    'text-align':'justify',
                                    'width':'20%',
                                    'margin':'auto'
                                }
                            )
                        ]),

                # submit button.
                dbc.Button('Analyze', id='button_app_analyze', n_clicks=0, size="lg", outline=True, color="warning", 
                    className='mr-1', style={'margin-top':'2%'}),
                dbc.Spinner(html.Div(id="container_output", style={'margin-top':'2%'}), color="warning", type="grow", size='lg')     
                ],style={
                    'width':'80%',
                    'margin':'auto',
                    'padding':'10px',
                    'text-align':'center',
                    'margin-top':'2%'
                })
            ]
        ),

        # <------------------------------------------Extract Feature UI -------------------------------------------------------------->
        dbc.Tab(id='feature_extract_tab',label='Extract features', children=[
                 html.H3("Extract Application features",style={'text-align':'center','color':'#007bff'}),
                # Feature Extraction Form
                html.Div(children=[
                        dbc.FormGroup(children=[
                                    html.H4('Add application(s) below'),
                                    dcc.Upload(
                                        id='feature_extraction_file_upload',
                                        children=html.Div([
                                            'Drag and Drop or ',
                                            html.A('Select Apk Files')
                                        ]),
                                        style={
                                            'width': '100%',
                                            'height': '60px',
                                            'lineHeight': '60px',
                                            'borderWidth': '1px',
                                            'borderStyle': 'dashed',
                                            'borderRadius': '5px',
                                            'textAlign': 'center',
                                            'margin': '10px'
                                        },
                                            # Allow multiple files to be uploaded
                                        multiple=True
                                    ),
                                    html.Div(id='feature_extraction_file_upload_status'),
                            ],  style={'margin-top':'2%'}
                        ),
                        dbc.FormGroup(children=[
                        html.H4("Select features"),
                        dbc.Checklist(
                                    options=[
                                        {"label": "Permissions", "value": 'permissions'},
                                        {"label": "Intents", "value": 'intents'},
                                        {"label": "Opcodes", "value": 'opcodes'},
                                        {"label": "Api calls", "value": 'apis'},
                                    ],
                                    value=[],
                                    id="feature_extraction_select_features_checklist",
                                    switch=True,
                                    style={
                                        'text-align':'justify',
                                        'width':'10%',
                                        'margin':'auto'
                                    }
                                ) 
                            ],  style={'margin-top':'2%'}
                        ),
                        dbc.Button('Extract', id='feature_extraction_submit_button', n_clicks=0, size='lg',outline=True, color='primary',
                            className='mr-1', style={'margin-top':'2%'}
                        )
                ]),
                dbc.Spinner(html.Div(id="feature_extraction_output", style={'margin-top':'2%'}), color="primary", type="grow", size='lg')
            ],style={
                    'width':'80%',
                    'margin':'auto',
                    'padding':'10px',
                    'text-align':'center',
                    'margin-top':'2%'
                }
        ),

        # <------------------------------------------Reduce feature space UI -------------------------------------------------------------->
        dbc.Tab(id='feature_reduction_tab',label="Reduce feature space", children=[
                    html.H3("Feature Reduction",style={'text-align':'center', 'color':'#28a745'}),
                    html.Div(children=[
                        dbc.FormGroup(children=[
                                html.H4("Add file below."),
                                dcc.Upload(
                                    id='feature_reduction_file_upload',
                                    children=html.Div([
                                        'Drag and Drop or ',
                                        html.A('Select csv file')
                                    ]),
                                    style={
                                        'width': '100%',
                                        'height': '60px',
                                        'lineHeight': '60px',
                                        'borderWidth': '1px',
                                        'borderStyle': 'dashed',
                                        'borderRadius': '5px',
                                        'textAlign': 'center',
                                        'margin': '10px'
                                    },
                                    multiple=False
                                ),
                                html.Div(id='feature_reduction_file_upload_status')
                            ]
                        ),
                        dbc.Row([
                            dbc.Col([dbc.FormGroup(children=[
                                        html.H4('Select reduction method'),
                                        dbc.RadioItems(
                                            id="feature_reduction_technique_radio",
                                            options=[
                                                {'label': 'LSI', 'value': 'lsi'},
                                                {'label': 'HDP', 'value': 'lda'},
                                            ],
                                            value='lsi',
                                            labelStyle={'display': 'inline-block', 'font-size':'17px'},
                                            inline=True
                                        )      
                                        ])
                                    ]),
                            dbc.Col([dbc.FormGroup(children=[
                                        html.H4("Enter the reduction dimensions"),
                                        dbc.Input(id="feature_reduction_topics_input", type="number", placeholder='Eg. 40')
                                    ])
                            ])
                        ],style={'margin-top':'2%'}),
                            
                        dbc.Button('Reduce', id='feature_reduction_button', n_clicks=0, size="lg", outline=True, color="success", 
                                className='mr-1', style={'margin-top':'2%'}),
                        dbc.Spinner(html.Div(id="feature_reduction_output", style={'margin-top':'2%'}), color="success", 
                                type="grow", size='lg')        
                        ], style={'margin-top':'2%'}
                    ),
                ], style={
                    'width':'80%',
                    'margin':'auto',
                    'padding':'10px',
                    'text-align':'center',
                    'margin-top':'2%'
                }
        ),

        # <------------------------------------------Train models UI -------------------------------------------------------------->
        dbc.Tab(id='train_ml_models_tab',label="Train models", children=[
                 html.H3("Train Models",style={'text-align':'center','color':'#dc3545'}),
                html.Div(children=[
                    dbc.Row(children=[
                        dbc.Col(children=[
                            dbc.FormGroup(children=[
                                    html.H4("Add Dataset file(s) below."),
                                    dcc.Upload(
                                        id='train_models_data_file_upload',
                                        children=html.Div([
                                            'Drag and Drop or ',
                                            html.A('Select csv file')
                                        ]),
                                        style={
                                            'width': '100%',
                                            'height': '60px',
                                            'lineHeight': '60px',
                                            'borderWidth': '1px',
                                            'borderStyle': 'dashed',
                                            'borderRadius': '5px',
                                            'textAlign': 'center',
                                            'margin': '10px'
                                        },
                                        multiple=True
                                    ),
                                    html.Div(id='train_models_data_file_upload_status')
                                ]
                            )
                        ]),
                        dbc.Col(children=[
                                dbc.FormGroup(children=[
                                    html.H4("Add Labels file."),
                                    dcc.Upload(
                                        id='train_models_label_file_upload',
                                        children=html.Div([
                                            'Drag and Drop or ',
                                            html.A('Select csv file')
                                        ]),
                                        style={
                                            'width': '100%',
                                            'height': '60px',
                                            'lineHeight': '60px',
                                            'borderWidth': '1px',
                                            'borderStyle': 'dashed',
                                            'borderRadius': '5px',
                                            'textAlign': 'center',
                                            'margin': '10px'
                                        },
                                        multiple=False
                                    ),
                                    html.Div(id='train_models_label_file_upload_status')
                                ])
                        ])
                    ], style={'margin-top':'2%'}),
                        html.Div([
                            dbc.FormGroup(
                                [
                                    dbc.Label("Dataset split ratio", html_for="slider"),
                                    dcc.Slider(id="train_models_split_slider", min=0, max=1, included=True, step=0.01, value=0.2, 
                                        tooltip={'always_visible':False, 'placement':'top'}),
                                ], style={
                                            'width': '30%',
                                            'margin':'auto'
                            }),
                            dbc.FormGroup(children=[
                                html.H4('Select ML models'),
                                dbc.Checklist(
                                    options=[
                                        {"label": "Catboost", "value": 'catboost'},
                                        {"label": "KNN", "value": 'knn'},
                                        {"label": "Logistic Regression", "value": 'lr'},
                                        {"label": "Random Forest", "value": 'rf'},
                                        {"label": "SVM", "value": 'svm'},
                                    ],
                                    value=[],
                                    id="train_models_checklist",
                                    switch=True,
                                    style={
                                        'text-align':'justify',
                                        'width':'15%',
                                        'margin':'auto'
                                    }
                                )
                            ]),
                                           
                        ],style={'margin-top':'2%'}),

                    dbc.Button('Train', id='train_models_button', n_clicks=0, size="lg", outline=True, color="danger", 
                        className='mr-1', style={'margin-top':'2%'}),
                    dbc.Spinner(html.Div(id="train_models_output", style={'margin-top':'2%'}), color="danger", type="grow", size='lg')
                ])
            ], style={
                'width':'80%',
                'margin':'auto',
                'padding':'10px',
                'text-align':'center',
                'margin-top':'2%'
            }
        )  
    ], active_tab='tab-0')   
], style={'font-family':'Quicksand, sans-serif'})

# <----------------------------------------------- Common functions -------------------------------------------------------------->
def getCurrentTime():
    time = datetime.now(timezone('Asia/Kolkata'))
    return time.strftime(r'%Y_%m_%d_%H_%M_%S')

# <----------------------------------------------- App analyze functions -------------------------------------------------------------->
# Check for successful file upload and make changes to UI.
@app.callback(dash.dependencies.Output('output-data-upload', 'children'),
              [dash.dependencies.Input('upload-data', 'contents')],
              [dash.dependencies.State('upload-data', 'filename')])
def update_analyze_output(list_of_contents, filename):
    if list_of_contents is None:
        return "No file uploaded."
    if filename.endswith(".apk") == False:
        return html.P("Wrong file format. please upload an apk file")
    return html.P("File: {}. Uploaded successfully".format(filename))

# Test Apk for malware interact with ui and fetch the nessecary params
@app.callback(
    dash.dependencies.Output('container_output', 'children'),
    [dash.dependencies.Input('button_app_analyze','n_clicks')],
    [dash.dependencies.State('upload-data', 'contents'),
     dash.dependencies.State('radio_reduction_technique', 'value'),
     dash.dependencies.State('checklist_pretrained_ml_models', 'value'),
    ]
)
def analyze_apk(n_clicks, file_value, reduction_value, ml_models_list):
    if n_clicks == 0:
        return ""
    
    if file_value is not None:
        
        content_type, content_string = file_value.split(',')
        decoded = base64.b64decode(content_string)
        
        results = testApplication(decoded, reduction_value, ml_models_list)
        vote = 0
        df = pd.DataFrame.from_dict(results)

        for result in results['Result']:
            if result == 'Malware':
                vote += 1
            else:
                vote -= 1

        if vote>0:
            return html.Div(children=[
                html.Hr(),
                html.H4("Analysis report: Malware",style={'color':'red'}),
                html.Hr(),
                html.Img(src='https://cdn.iconscout.com/icon/free/png-512/android-34-72527.png',
                style={
                    'width':'25%',
                    'height':'25%',
                    'margin':'auto'
                }),
                html.Hr(),
                # html.P(feature),
                html.H5("Model-wise results"),
                html.Hr(),
                dbc.Table.from_dataframe(df, striped=True, bordered=True, hover=True)
            ])
        else:
            return html.Div(children=[
                html.Hr(),
                html.H4("Analyses report: Benign",style={'color':'green'}),
                html.Hr(),
                html.Img(src='https://cdn1.iconfinder.com/data/icons/logotypes/32/android-512.png',
                style={
                    'width':'25%',
                    'height':'25%',
                    'margin':'auto'
                }),
                html.Hr(),
                html.H5("Model-wise results"),
                html.Hr(),
                # html.P(feature),
                dbc.Table.from_dataframe(df, striped=True, bordered=True, hover=True)
            ])
    else:
        return html.Div("No file uploaded or file type incorrect")

# Make the services call nessecary to analyze apk and compile results.
def testApplication(app_location, reduction_technique,ml_model_list):
    print("Extracting feature from - ",app_location)
    feature_extraction = extraction.FeatureExtraction()
    feature_vector = feature_extraction.get_application_feature_vector(app_location, reduction_technique)
    print("<-------------------- !! Feature Extraction completed !! ---------------------------------->")
    print(feature_vector)
    print("<------------------------- || Running ML Models || ------------------------------------------->")
    
    return dynamic_model(feature_vector, reduction_technique,ml_model_list)

# Predicts the app's behaviour using pretrained models.
def dynamic_model(X_train, reduction_technique,ml_model_list): 
        result = {
            'Model': [],
            'Result':[]
        }
        model_code_to_name_mapping ={
            'catboost':"Catboost",
            'lr':"Logistic Regression",
            'knn': "KNN",
            'rf': "Random Forest",
            'svm': "SVM"
        }
        ml_models = models.MlModels()
        # List of pretrained ml models
        # ml_models_to_run = ['catboost', 'knn', 'lr', 'rf', 'svm']
        for model in ml_model_list:
            # store results for final evaluation later.
            res = ml_models.test_using_saved_models(model_name=model + "_" + reduction_technique, X_test=X_train)
            result['Model'].append(model_code_to_name_mapping[model])
            result['Result'].append(res)
        print(result)
        return result

# <------------------------------------------------------Extract feature tab functions ------------------------------------------>
# Update uploaded file information
@app.callback(dash.dependencies.Output('feature_extraction_file_upload_status', 'children'),
              [dash.dependencies.Input('feature_extraction_file_upload', 'contents')],
              [dash.dependencies.State('feature_extraction_file_upload', 'filename')])
def update_extract_output(list_of_contents, file_name_list):
    if list_of_contents is None:
        return "No file(s) uploaded."
    html_file_upload_success = []
    html_file_upload_error = []
    i = 0
    error_count = 0
    for content in list_of_contents:
        if content is not None and file_name_list[i].endswith(".apk") == True:
            html_file_upload_success.append(file_name_list[i])
        elif file_name_list[i].endswith(".apk") == False:
            html_file_upload_error.append(html.P("Error: Incorrect file format. File: " + file_name_list[i]))
            error_count += 1
        else:
            html_file_upload_error.append(html.P("Error: upload Failed. File: " + file_name_list[i]))
            error_count += 1
        i += 1
    if error_count == 0:
        return [html.P("{} of {} files uploaded successfully!!".format(len(html_file_upload_success), len(list_of_contents)))]
    else:
        return [html.P("{} of {} files".format(error_count, len(list_of_contents))+" not uploaded due to error.")] + html_file_upload_error  

# Main Extract features function
# Takes a list of files and returns the final report of extracted features.
# also writes the data to csv location: C:\file_name.csv. 
@app.callback(
    dash.dependencies.Output('feature_extraction_output', 'children'),
    [dash.dependencies.Input('feature_extraction_submit_button','n_clicks')],
    [dash.dependencies.State('feature_extraction_file_upload', 'contents'),
     dash.dependencies.State('feature_extraction_file_upload', 'filename'),
     dash.dependencies.State('feature_extraction_select_features_checklist', 'value'),
    ]
)
def extract_features(n_clicks, list_of_contents, filenames, list_of_features):
    feature_extraction_obj = extraction.FeatureExtraction()
    final_html_ui = []
    app_data_for_writing = []
    if n_clicks == 0:
        return ""
    if len(list_of_features) == 0:
        return html.H4("No feature selected to be extracted.")
    wrong_format_files = []
    i = 0
    error_files = 0
    for content in list_of_contents:
        single_app_ui = []
        if filenames[i].endswith(".apk"):
            # Decode uploaded file
            content_type, content_string = content.split(',')
            decoded_apk = base64.b64decode(content_string)

            # extract feature from file
            feature_vector_dictionary = feature_extraction_obj.extract_feature_from_application(decoded_apk)
            permissions_list = feature_extraction_obj.get_one_hot_encode_to_name(feature_vector_dictionary['permissions'], True)
            intents_list = feature_extraction_obj.get_one_hot_encode_to_name(feature_vector_dictionary['intents'], False)
            opcodes_dictionary = feature_vector_dictionary['opcodes']
            apis_dictionary = feature_vector_dictionary['apis']

            app_data_for_writing.append([filenames[i], feature_vector_dictionary])
         
            # Ouput preperation by changing extracted feature to user readable format.
            single_app_ui.append(html.H5("Extracted features of " + filenames[i], style={"color":'cadetblue'}))
            if 'permissions' in list_of_features:
                permission_op = "Permissions: "
                for p in permissions_list[:-1]:
                    permission_op += p +", "
                permission_op += permissions_list[-1]    
                html_permissions_output = html.Div(children=[
                    html.P(permission_op, style={'word-break':'break-all'})
                ])
                single_app_ui.append(html_permissions_output)
            
            if 'intents' in list_of_features:    
                intents_op = "Intents: "
                for it in intents_list[:-1]:
                    intents_op += it +", "
                intents_op += intents_list[-1]    
                html_intents_output = html.Div(children=[
                    html.P(intents_op, style={'word-break':'break-all'})
                ])
                single_app_ui.append(html_intents_output)
            
            if 'opcodes' in list_of_features:
                dict_to_df = {}
                for op in opcodes_dictionary.keys():
                    dict_to_df[op] = [opcodes_dictionary[op]]
                dof = pd.DataFrame.from_dict(dict_to_df)
                html_opcodes_output = html.Div(children=[
                                            html.H6("Opcodes"),
                                            dbc.Table.from_dataframe(dof,  bordered=True, hover=True)])
                single_app_ui.append(html_opcodes_output)

            if 'apis' in list_of_features:
                dict_to_dif = {}
                for api in apis_dictionary.keys():
                    dict_to_dif[api] = [apis_dictionary[api]]
                
                dif = pd.DataFrame.from_dict(dict_to_dif)
                html_apis_output = html.Div(children=[
                                            html.H6("Apis"),
                                            dbc.Table.from_dataframe(dif,  bordered=True, hover=True)])
                single_app_ui.append(html_apis_output)

            final_html_ui.append(html.Div(children=single_app_ui))
        else:
            error_files += 1
            wrong_format_files.append(filenames[i])
        i += 1
    # Save the extracted features list in csv format.
    extracted_feature_dataframe = feature_extraction_obj.get_feature_vector_to_dataframe(app_data_for_writing,list_of_features)
    save_extracted_dataset(extracted_feature_dataframe)
    # Return the final computed ui.
    if error_files > 0:
        return [html.H3("Extraction Results",style={'color':'darkseagreen'}), html.P("Some files were of wrong format")] + final_html_ui

    return [html.H3("Extraction Results", style={'color':'darkseagreen'})] + final_html_ui

def save_extracted_dataset(dataset):
    file_path = constants.extracted_features_csv_write_path + "features_{}.csv".format(getCurrentTime())
    dataset.to_csv(file_path,index=False)

# <------------------------------------------ Reduce features space functions ----------------------------------------------------->
# Update file upload information
@app.callback(dash.dependencies.Output('feature_reduction_file_upload_status', 'children'),
              [dash.dependencies.Input('feature_reduction_file_upload', 'contents')],
              [dash.dependencies.State('feature_reduction_file_upload', 'filename')])
def update_reduction_output(list_of_contents, filename):
    if list_of_contents is None:
        return "No file uploaded."
    if filename.endswith(".csv") == False:
        return html.P("Wrong file format. please upload a csv file")
    return html.P("File: {}. Uploaded successfully".format(filename))  

@app.callback(
    dash.dependencies.Output('feature_reduction_output', 'children'),
    [dash.dependencies.Input('feature_reduction_button','n_clicks')],
    [dash.dependencies.State('feature_reduction_file_upload', 'contents'),
     dash.dependencies.State('feature_reduction_file_upload', 'filename'),
     dash.dependencies.State('feature_reduction_technique_radio', 'value'),
     dash.dependencies.State('feature_reduction_topics_input', 'value')
    ]
)
def reduce_features(n_clicks, contents, filename, reduction_technique, topics):
    lsi_obj = lsi.LSI()
    lda_obj = lda.LDA()
    if n_clicks == 0:
        return ""
    if contents is None or topics == 0:
        return "No file or topic feild empty"
    content_type, content_string = contents.split(',')
    decoded = base64.b64decode(content_string)
        
    try:
        df = pd.read_csv(io.StringIO(decoded.decode('utf-8')))
    
        if len(df.columns) < topics:
            return html.P("original space is less than the reduction space")
        if reduction_technique == 'lsi':
            reduced_df = lsi_obj.reduce_data(df, topics)
            save_reduced_dataset(reduced_df)
            return dbc.Table.from_dataframe(reduced_df, striped=True, bordered=True, hover=True)
        else:
            reduced_df = lda_obj.reduce_data(df, topics)
            save_reduced_dataset(reduced_df)
            return [html.H4("Reduced dataset"),
                dbc.Table.from_dataframe(reduced_df, striped=True, bordered=True, hover=True)]
        
    except Exception as e:
        return html.P("File not processed. Error: {}".format(e))

# Save the dataset to location C:\dashUI\userSaveData\reducedFeatures
def save_reduced_dataset(dataset):
    file_path = constants.reduced_features_csv_write_path + "reduced_features_{}.csv".format(getCurrentTime())
    dataset.to_csv(file_path,index=False)
            

# <------------------------------------------ Train Models functions -------------------------------------------------------------->
# Updates uploaded files details.
@app.callback(dash.dependencies.Output('train_models_label_file_upload_status', 'children'),
              [dash.dependencies.Input('train_models_label_file_upload', 'contents')],
              [dash.dependencies.State('train_models_label_file_upload', 'filename')])
def update_train_label_output(list_of_contents, filename):
    if list_of_contents is None:
        return "No file uploaded."
    if filename.endswith(".csv") == False:
        return html.P("Wrong file format. please upload a csv file")
    return html.P("File: {}. Uploaded successfully".format(filename))  

# Updates uploaded files for label data
@app.callback(dash.dependencies.Output('train_models_data_file_upload_status', 'children'),
              [dash.dependencies.Input('train_models_data_file_upload', 'contents')],
              [dash.dependencies.State('train_models_data_file_upload', 'filename')])
def update_train_data_output(list_of_contents, filenames):
    if list_of_contents is None:
        return "No file uploaded."
    i = 0
    error = []
    for content in list_of_contents:
        if content is None or filenames[i].endswith(".csv") == False:
            error.append(html.P("Wrong file format. File: {}".format(filenames[i])))
        i += 1
        if len(error) > 0:
            return [html.P("{} of {} files not uploaded. Details:".format(len(error), len(filenames)))] + error
    return html.P("{} of {} files Uploaded successfully".format(len(filenames), len(filenames)))

# Trains model given by user
@app.callback(
    dash.dependencies.Output('train_models_output', 'children'),
    [dash.dependencies.Input('train_models_button','n_clicks')],
    [dash.dependencies.State('train_models_data_file_upload', 'contents'),
     dash.dependencies.State('train_models_label_file_upload', 'contents'),
     dash.dependencies.State('train_models_checklist', 'value'),
     dash.dependencies.State('train_models_split_slider', 'value')
    ]
)
def train_models(n_clicks, data_contents, label_contents, ml_models_list, split_ratio):
    model_result = {
        'name': [],
        'accuracy': [],
        'precision': [],
        'recall': [],
        'f1-score': []
    }
    model_name_list = []
    if n_clicks == 0: 
        return ""
    if label_contents is None:
        return html.P("No Class label file. Please upload one.")
    if data_contents is None:
        return html.P("No dataset provided.")
    hyperparams = []
    try:
        ml_models = models.MlModels()
        report_generator = reportGenerator.ReportGenerator()

        content_type, content_string = label_contents.split(',')
        decoded = base64.b64decode(content_string)
        df_label = pd.read_csv(io.StringIO(decoded.decode('utf-8')))

        df_list = []
        for contents in data_contents:
            content_type, content_string = contents.split(',')
            decoded = base64.b64decode(content_string)
            df_list.append(pd.read_csv(io.StringIO(decoded.decode('utf-8'))))

        df_main = df_list[0]
        for df in df_list[1:]:
            df_main = df_main.merge(df, on='Name')
        
        df_main = df_main.merge(df_label, on='Name')

        X_train, X_test, y_train, y_test = ml_models.split_dataset(df_main.iloc[:,1:], split_ratio)

        if 'catboost' in ml_models_list:
            model = ml_models.runCatBoost(X_train, y_train, hyperparams)
            save_model(model, 'catboost')
            out = report_generator.createReport(model, X_test, y_test)
            model_result['name'].append("Catboost")
            model_result['accuracy'].append("{:2f}".format(out[0]*100))
            model_result['precision'].append("{:4f}".format(out[1]))
            model_result['recall'].append("{:4f}".format(out[2]))
            model_result['f1-score'].append("{:4f}".format(out[3]))
        
        if 'knn' in ml_models_list:
            model = ml_models.runKNN(X_train, y_train,  hyperparams)
            save_model(model, 'knn')
            out = report_generator.createReport(model, X_test, y_test)
            model_result['name'].append("KNN")
            model_result['accuracy'].append("{:2f}".format(out[0]*100))
            model_result['precision'].append("{:4f}".format(out[1]))
            model_result['recall'].append("{:4f}".format(out[2]))
            model_result['f1-score'].append("{:4f}".format(out[3]))
            
        if 'lr' in ml_models_list:
            model = ml_models.runLogReg(X_train, y_train,  hyperparams)
            save_model(model, 'lr')
            out = report_generator.createReport(model, X_test, y_test)
            model_result['name'].append("Logistic Regression")
            model_result['accuracy'].append("{:2f}".format(out[0]*100))
            model_result['precision'].append("{:4f}".format(out[1]))
            model_result['recall'].append("{:4f}".format(out[2]))
            model_result['f1-score'].append("{:4f}".format(out[3]))
            
        if 'rf' in ml_models_list:
            model = ml_models.runRandomForest(X_train, y_train,  hyperparams)
            save_model(model, 'rf')
            out = report_generator.createReport(model, X_test, y_test)
            model_result['name'].append("Random Forest")
            model_result['accuracy'].append("{:2f}".format(out[0]*100))
            model_result['precision'].append("{:4f}".format(out[1]))
            model_result['recall'].append("{:4f}".format(out[2]))
            model_result['f1-score'].append("{:4f}".format(out[3]))
            
        if 'svm' in ml_models_list:
            model = ml_models.runSVM(X_train, y_train,  hyperparams)
            save_model(model,'svm')
            out = report_generator.createReport(model, X_test, y_test)
            model_result['name'].append("SVM")
            model_result['accuracy'].append("{:2f}".format(out[0]*100))
            model_result['precision'].append("{:4f}".format(out[1]))
            model_result['recall'].append("{:4f}".format(out[2]))
            model_result['f1-score'].append("{:4f}".format(out[3]))

        final_html_ui = format_report_to_table_output(model_result)
        return [html.H4("Trained Model Metrics"), final_html_ui]
    except Exception as e:
        return html.H6("Something went wrong. Error: {}".format(e))

# saves model into a pickle file.
def save_model(model, model_name):
    file_path = constants.trained_models_write_path + model_name + "_{}.pkl".format(getCurrentTime())
    with open(file_path, 'wb') as f:
        pickle.dump(model, f, pickle.HIGHEST_PROTOCOL)
        f.close()

# creates graphs output graphs.
def format_report_to_output(model_results):
    output_html = []

    accuracy_data = {   'model_name': model_results['name'], 
                        'accuracy':model_results['accuracy'],
                }
    precision_data = {   'model_name': model_results['name'], 
                        'precision':model_results['precision']
                }
    recall_data = {   'model_name': model_results['name'], 
                      'recall':model_results['recall']
                }
    f1_score_data = {   'model_name': model_results['name'], 
                        'f1-score':model_results['f1-score']
                }
    
    a_df = pd.DataFrame.from_dict(accuracy_data)
    p_df = pd.DataFrame.from_dict(precision_data)
    r_df = pd.DataFrame.from_dict(recall_data)
    f_df = pd.DataFrame.from_dict(f1_score_data)
    
    print(a_df)
    # output_html.append(html.P(f1_score_data))
    a_fig = px.bar(a_df, x="model_name", y="accuracy", title="Accuracy")
    p_fig = px.bar(p_df, x="model_name", y="precision", title="Precision")
    r_fig = px.bar(r_df, x="model_name", y="recall", title="Recall of models")
    f_fig = px.bar(f_df, x="model_name", y="f1-score", title="F1-Score of models")
    
    output_html.append(dcc.Graph(figure=a_fig, 
        animate=True, style={'width':'50%', 'margin':'auto', 'background':'darkcyan'}))
    output_html.append(html.Hr())

    output_html.append(dcc.Graph(figure=p_fig, 
        animate=True, style={'width':'50%', 'margin':'auto'}))
    output_html.append(html.Hr())

    output_html.append(dcc.Graph(figure=r_fig, 
        animate=True, style={'width':'50%', 'margin':'auto'})) 
    output_html.append(html.Hr())

    output_html.append(dcc.Graph(figure=f_fig, 
        animate=True, style={'width':'50%', 'margin':'auto'}))
    
    return html.Div(children=output_html)
  
def format_report_to_table_output(model_results):
    df = pd.DataFrame.from_dict(model_results)
    return dbc.Table.from_dataframe(df, striped=True, borderless=True, hover=True)

if __name__ == '__main__':
    app.run_server(debug=True)


        # op_df = {
                #     'Opcodes':[],
                #     'Count':[]
                # }
                # # Change opcode presentation
                # for opcode in opcodes_dictionary.keys():
                #     op_df['Count'].append(opcodes_dictionary[opcode])
                #     op_df['Opcodes'].append(opcode)                
        
import pandas as pd

import gensim
from gensim import corpora
from gensim.models import LsiModel


class LSI:
  def __init__(self):
    self.dictionary = {}
    self.corpus = []
    self.model = None
    self.num_topics = 40
  
  def _create_dictionary(self, df_original):
    dictionary={}
    for i, element in enumerate(df_original.columns[1:]):
      dictionary[i] = element
    return dictionary

  def _create_corpus(self, df_original):
    corpus = []
    for i in range(len(df_original)):
      corpus_app_level = []
      for index, e in enumerate(df_original.iloc[i, 1:].values):
        if(e != 0):
          corpus_app_level.append((index, e))
      corpus.append(corpus_app_level) 
    return corpus 

  def fit(self, df_original, num_topics):
    self.num_topics = num_topics
    #Create Dictionary
    self.dictionary = self._create_dictionary(df_original)

    #Create corpus
    self.corpus = self._create_corpus(df_original) 
    
    #Train Model
    self.model = LsiModel(self.corpus, id2word=self.dictionary, num_topics=self.num_topics)
    vectorized_corpus = self.model[self.corpus]
    final_vectorized_corpus = [[topic[1] for topic in doc] for doc in vectorized_corpus]
    self.num_topics = len(vectorized_corpus[0])
    df_lsi_reduced = pd.DataFrame(final_vectorized_corpus, columns=range(0, self.num_topics))
    df_lsi_reduced.insert(0, 'Name', list(df_original['Name'].values), False) #add Name column in reduced Dataframe
    df_lsi_reduced = df_lsi_reduced.sort_values(by=['Name'])
    return df_lsi_reduced

  def reduce_data(self, df_original, num_topics=40):
    print(df_original.shape)
    return self.fit(df_original, num_topics)

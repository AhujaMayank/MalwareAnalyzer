import pandas as pd

import gensim
from gensim import corpora
from gensim.models import HdpModel

class LDA:
  def __init__(self):
    self.dictionary = {}
    self.corpus = []
    self.model = None
  
  def _create_dictionary(self, df_original):
    dictionary={}
    for i, element in enumerate(df_original.columns[1:]):
      dictionary[i] = element
    return dictionary

  def _create_corpus(self, df_original):
    corpus = []
    for i in range(len(df_original)):
      corpus_app_level = []
      for index, e in enumerate(df_original.iloc[i, 1:].values):
        if(e != 0):
          corpus_app_level.append((index, e))
      corpus.append(corpus_app_level) 
    return corpus 

  def fit(self, df_original, topics):
    #Create Dictionary
    self.dictionary = self._create_dictionary(df_original)

    #Create corpus
    self.corpus = self._create_corpus(df_original) 

    #Train Model
    hdp = HdpModel(self.corpus, id2word=self.dictionary, T=topics)
    self.model = hdp.suggested_lda_model()
    feature_vecs = []
    for i in range(len(self.corpus)):
      top_topics = self.model.get_document_topics(self.corpus[i], minimum_probability=0.0)
      topic_vec = [0]*topics
      for j in top_topics:
          index = j[0]
          topic_vec[index] = j[1]
      feature_vecs.append(topic_vec)
    
    df_lda_reduced = pd.DataFrame(feature_vecs, columns=list(range(len(feature_vecs[0]))))
    df_lda_reduced.insert(0, 'Name', list(df_original['Name'].values), False)
    df_lda_reduced = df_lda_reduced.sort_values(by=['Name'])
    return df_lda_reduced


    

  def reduce_data(self, df_original, topics):
    print(df_original.shape)
    return self.fit(df_original, topics)
    